<!DOCTYPE html>
<html>
	<head>
		<meta charset="utf-8" />
		<title>TM Visualization</title>
		<style type="text/css">
			table {
				border-collapse: collapse;
				display: inline-table;
			}
			th {
				text-align: right;
			}
			td {
				text-align: left;
				padding: 5px;
			}
			
			
			table.columns {
				border-collapse: separate;
				border-spacing: 8px 0px;
			}
			td.cell {
				padding: 4px;
				border: 1px solid black;
				border-top: none;
				background-color: #ffffff;
			}
			tr:first-child td.cell {
				border-top: 1px solid black;
			}
			
			div.inline {
				display: inline-block;
			}
			div.input_header {
				text-align:center;
			}
			h3#initializing {
				margin-top:16px;
			}
			td.cell.predictive {
				background-color: #0000ff;
			}
			td.cell.predictive.learning {
				border: 1px solid orange;
				border-top: none;
			}
			tr:first-child td.cell.predictive.learning {
				border-top: 1px solid orange;
			}
			.active {
				background-color: #ff0000 !important;
			}
			td.cell.active.learning {
				border: 1px solid orange;
				border-top: none;
			}
			tr:first-child td.cell.active.learning {
				border-top: 1px solid orange;
			}
			#keyboard {
				width: 300px;
			}
			#keyboard_top {
				width: 100%;
			}
			#keyboard_bottom {
				width: 100%;
				margin-top: -4px;
			}
			td.key {
				cursor: pointer;
				background-color: white;
			}
			td.key.hover{
				background-color: lightgrey;
			}
			td.key_top {
				border-top: 1px solid black;
				border-left: 1px solid black;
				border-right: 1px solid black;
				width: 10%;
			}
			td.key_bottom {
				border-bottom: 1px solid black;
				border-left: 1px solid black;
				border-right: 1px solid black;
				height: 32px;
				width: 20%;
			}
			td.key_black {
				border-top: 1px solid black;
				border-left: 1px solid black;
				border-right: 1px solid black;
				background-color: black;
				width: 15%;
			}
			td.key_black.end {
				width: 6%;
			}
			div#legend_active {
				width: 8px;
				height: 8px;
				background-color: #FF0000;
				border: 1px solid black;
				display: inline-block;
				margin-left: 8px;
				margin-right: 8px;
			}
			div#legend_predictive {
				width: 8px;
				height: 8px;
				background-color: #0000FF;
				border: 1px solid black;
				display: inline-block;
				margin-left: 8px;
				margin-right: 8px;
			}
			div#legend_learning {
				width: 8px;
				height: 8px;
				background-color: #ffffff;
				border: 1px solid orange;
				display: inline-block;
				margin-left: 8px;
				margin-right: 8px;
			}
		</style>
	</head>
	<body>
		<div>
			<button id="action" type="button">Begin Simulation >></button>
			<b id = "initializing" style="display:none;">Initializing...</b>
		</div>
		<div id="properties">
			<table>
				<thead>
					<tr>
						<th colspan=6 style="text-align: center"><h3>TM Properties</h3></th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<th>Columns Per Input</th>
						<td><input id="columnsPerInput" type="number" min="1" max="40" value="8"></td>
						<td><i>(1-40)</i></td>
						<th>Cells Per Column</th>
						<td><input id="cellsPerColumn" type="number" min="1" max="32" value="32"></td>
						<td><i>(1-32)</i></td>
					</tr>
					<tr>
						<th>Activation Threshold</th>
						<td><input id="activationThreshold" type="number" min="1" max="128" value="3"></td>
						<td><i>(1-128)</i></td>
						<th>Initial Permanence</th>
						<td><input id="initialPermanence" type="number" min="1" max="100" value="50"></td>
						<td><i>(1-100)</i></td>
					</tr>
					<tr>
						<th>Connected Permanence</th>
						<td><input id="connectedPermanence" type="number" min="1" max="100" value="50"></td>
						<td><i>(1-100)</i></td>
						<th>Minimum Threshold</th>
						<td><input id="minThreshold" type="number" min="1" max="128" value="5"></td>
						<td><i>(1-128)</i></td>
					</tr>
					<tr>
						<th>Max New Synapse Count</th>
						<td><input id="maxNewSynapseCount" type="number" min="1" max="32" value="5"></td>
						<td><i>(1-32)</i></td>
						<th>Permanence Increment</th>
						<td><input id="permanenceIncrement" type="number" min="1" max="100" value="10"></td>
						<td><i>(1-100)</i></td>
					</tr>
					<tr>
						<th>Permanence Decrement</th>
						<td><input id="permanenceDecrement" type="number" min="1" max="100" value="10"></td>
						<td><i>(1-100)</i></td>
						<th>Predicted Segment Decrement</th>
						<td><input id="predictedSegmentDecrement" type="number" min="1" max="100" value="5"></td>
						<td><i>(1-100)</i></td>
					</tr>
					<tr>
						<th>Max Segments per Cell</th>
						<td><input id="maxSegmentsPerCell" type="number" min="1" max="128" value="128"></td>
						<td><i>(1-128)</i></td>
						<th>Max Synapses per Segment</th>
						<td><input id="maxSynapsesPerSegment" type="number" min="1" max="128" value="128"></td>
						<td><i>(1-128)</i></td>
					</tr>
				</tbody>
			</table>
		</div>
		<div id="interface" style="display:none;">
			<div class="legend">
				<div id="legend_active"></div><span>Active</span>
				<div id="legend_predictive"></div><span>Predictive</span>
				<div id="legend_learning"></div><span>Learning</span>
			</div>
			<div>
				<div class="input_wrapper inline">
					<div class="input_header">C</div>
					<table class="columns">
						<thead></thead>
						<tbody id="tbody_c"></tbody>
					</table>
				</div>
				<div class="input_wrapper inline">
					<div class="input_header">D</div>
					<table class="columns">
						<thead></thead>
						<tbody id="tbody_d"></tbody>
					</table>
				</div>
				<div class="input_wrapper inline">
					<div class="input_header">E</div>
					<table class="columns">
						<thead></thead>
						<tbody id="tbody_e"></tbody>
					</table>
				</div>
	
				<div class="input_wrapper inline">
					<div class="input_header">F</div>
					<table class="columns">
						<thead></thead>
						<tbody id="tbody_f"></tbody>
					</table>
				</div>
				<div class="input_wrapper inline">
					<div class="input_header">G</div>
					<table class="columns">
						<thead></thead>
						<tbody id="tbody_g"></tbody>
					</table>
				</div>
			</div>
			<table id="keyboard">
				<thead></thead>
				<tbody>
					<tr>
						<td colspan=3>
							<table id="keyboard_top">
								<thead></thead>
								<tbody>
									<tr>
										<td class="key key_top key_c" data-key="c"></td>
										<td class="key_black"></td>
										<td class="key key_top key_d" data-key="d"></td>
										<td class="key_black"></td>
										<td class="key key_top key_e" data-key="e"></td>
										<td class="key key_top key_f" data-key="f"></td>
										<td class="key_black"></td>
										<td class="key key_top key_g" data-key="g"></td>
										<td class="key_black end"></td>
									</tr>
								</tbody>
							</table>
							<table id="keyboard_bottom">
								<thead></thead>
								<tbody>
									<tr>
										<td class="key key_bottom key_c" data-key="c"></td>
										<td class="key key_bottom key_d" data-key="d"></td>
										<td class="key key_bottom key_e" data-key="e"></td>
										<td class="key key_bottom key_f" data-key="f"></td>
										<td class="key key_bottom key_g" data-key="g"></td>
									</tr>
								</tbody>
							</table>
						</td>
					</tr>
				</tbody>
			</table>
			<div id="predict"><b>Prediction: </b><span id="prediction">(none)</span></div>
			<div id="history"></div>
		</div>
		
		<script src="../assets/scripts/jquery.min.js"></script>
		<script src="../../prototypes/synapse.prototype.js"></script>
		<script src="../../prototypes/segment.prototype.js"></script>
		<script src="../../prototypes/cell.prototype.js"></script>
		<script src="../../prototypes/cellmatrix.prototype.js"></script>
		<script src="../../prototypes/column.prototype.js"></script>
		<script src="../../prototypes/layer.prototype.js"></script>
		<script src="../../htm.controller.js"></script>
		<script type="text/javascript">
			
			var columns, noPredictionMessage;
			var params = {};
			var keys = ['c', 'd', 'e', 'f', 'g'];
			
			// Load the notes
			var sounds = {};
			loadSounds();
			
			// Controller for HTM functions
			var htmController = new HTMController();
			
			$( document ).bind( "ready", function() {
				noPredictionMessage = $( "span#prediction" ).text();
				$( "#action" ).click( function() {
					// User clicked the action button
					if( $( this ).hasClass( "in_progress" ) ) {
						// Stop the simulation
						$( this ).html( "Begin Simulation >>" );
						$( this ).removeClass( "in_progress" );
						$( ".line" ).remove();
						$( ".cell" ).remove();
						$( "#properties" ).show();
						$( "#interface" ).hide();
						destroyLayer();
					} else {
						// Start the simulation
						$( this ).html( "End Simulation <<" );
						$( this ).addClass( "in_progress" );
						$( "#action" ).hide();
						$( "#initializing" ).show();
						// Using setTimeout, so processing message has time to appear
						setTimeout( function() {
							createLayer();
							$( "#initializing" ).hide();
							$( "#action" ).show();
							$( "#properties" ).hide();
							$( "#interface" ).show();
						}, 50 );
					}
				});
				
				$( document ).on( "mouseenter", "td.cell", function() {
					var i, w, tgtElem, segment;
					var cell = htmController.layers[0].cellMatrix.cells[$( this ).attr( "data-index" )];
					$( ".line" ).remove();
					for( i = 0; i < cell.axonSynapses.length; i++ ) {
						tgtElem = $( "td#cell_" + cell.axonSynapses[i].segment.cellRx.index );
						if( cell.active ) {
							drawCellConnections( $( this ), tgtElem, "#ff0000" );
						} else {
							drawCellConnections( $( this ), tgtElem, "#ff6666" );
						}
					}
					for( i = 0; i < cell.distalSegments.length; i++ ) {
						segment = cell.distalSegments[i];
						for( w = 0; w < segment.synapses.length; w++ ) {
							tgtElem = $( "td#cell_" + segment.synapses[w].cellTx.index );
							drawCellConnections( $( this ), tgtElem, "#6666cc" );
						}
						for( w = 0; w < segment.connectedSynapses.length; w++ ) {
							tgtElem = $( "td#cell_" + segment.connectedSynapses[w].cellTx.index );
							drawCellConnections( $( this ), tgtElem, "#0000ff" );
						}
					}
				} );
				
				// Handle mouse events on the piano
				$( "td.key" ).mouseenter( function() {
					$( "td.key" ).removeClass( "hover" );
					$( ".key_" + $( this ).attr( "data-key" ) ).addClass( "hover" );
				});
				$( "td.key" ).mouseleave( function() {
					$( "td.key" ).removeClass( "hover" );
				} );
				$( "td.key" ).mousedown( function() {
					$( "td.key" ).removeClass( "active" );
					$( ".key_" + $( this ).attr( "data-key" ) ).addClass( "active" );
					play( $( this ).attr( "data-key" ) );
				});
				$( "td.key" ).mouseup( function() {
					$( "td.key" ).removeClass( "active" );
				} );
				
				// Handle keyboard events on the piano
				$( window ).keydown( function( e ) {
					$( "td.key" ).removeClass( "active" );
					var key = e.which;
					switch( key ) {
						case 67:
							$( ".key_c" ).addClass( "active" );
							play( 'c' );
							break;
						case 68:
							$( ".key_d" ).addClass( "active" );
							play( 'd' );
							break;
						case 69:
							$( ".key_e" ).addClass( "active" );
							play( 'e' );
							break;
						case 70:
							$( ".key_f" ).addClass( "active" );
							play( 'f' );
							break;
						case 71:
							$( ".key_g" ).addClass( "active" );
							play( 'g' );
							break;
					}
				} );
				$( window ).keyup( function( e ) {
					$( "td.key" ).removeClass( "active" );				
				} );
				
			} );
			
			
			/**
			* Constructs the layer's data structures and connections according to
			* the specified parameters, and represents it as a table grid on the page
			*/
			function createLayer() {
				var x;
				
				// Parse the properties
				params = { 'skipSpatialPooling' : true, 'inputCellCount' : 0 };
				$( 'input[type="number"]' ).each( function() {
					params[ $( this ).attr( 'id' ) ] = parseInt( $( this ).val() );
				});
				columns = { 'c':[], 'd':[], 'e':[], 'f':[], 'g':[] };
				
				// Create the layer
				htmController.clear();
				htmController.createLayer( params );
				
				// Manually create the columns for TM visualization
				for( x = 0; x < keys.length; x++ ) {
					createColumns( keys[x] );
				}
			}
			
			/**
			* Adds the columns and cells to the layer, and represents them in the UI
			*/
			function createColumns( note ) {
				var layer = htmController.layers[0];
				var x, y, cell, tbodyCode;
				
				// Create the columns and cells
				for( x = 0; x < params.columnsPerInput; x++ ) {
					columns[note].push( layer.addColumn() );
				}
				tbodyCode = '';
				for( y = 0; y < params.cellsPerColumn; y++ ) {
					tbodyCode += '<tr>';
					for( x = 0; x < params.columnsPerInput; x++ ) {
						cell = columns[note][x].cells[y];
						tbodyCode += '<td id="cell_' + cell.index + '" class="cell" data-note="' + note + '" data-index="' + cell.index + '"></td>';
					}
					tbodyCode += '</tr>';
				}
				$( '#tbody_' + note ).html( tbodyCode );
			}
			
			
			/**
			* Clears the data and DOM elements from the simulation
			*/
			function destroyLayer() {
				// Remove DOM elements from the simulation
				$( "#layer-body" ).remove();
				$( "#history" ).text( "" );
				$( "#prediction" ).text( noPredictionMessage );
				
				// Clear data from the simulation
				columns = { 'c':[], 'd':[], 'e':[], 'f':[], 'g':[] };
				htmController.clear();
			}
			
			
			/*
			* Play a note
			*/
			function play( note ) {
				var cell;
				// There is only one layer in this demo
				var layer = htmController.layers[0];
				
				// Play the audio file for this note
				sounds[note].pause();
				sounds[note].currentTime = 0;
				sounds[note].play();
				
				$( ".line" ).remove();
				
				// Add this note to the history
				$( "#history" ).append( note.toUpperCase() + " " );
				
				// Activate columns for this note
				layer.activeColumns = columns[note];
				// Increment timestep (normally would happen in SP phase)
				layer.timestep++;
				
				// Temporal Memory (TM) phase
				htmController.temporalMemory( 0, true );
				
				// Update the cell states visualization
				updateVisualization();
				
				// Make a prediction about which note will be played next
				predict();
			}
			
			/*
			* Update the cell states visualization
			*/
			function updateVisualization() {
				// There is only one layer in this demo
				var layer = htmController.layers[0];
				
				// Remove status classes from previous timestep
				$( ".cell" ).removeClass( "active" ).removeClass( "predictive" ).removeClass( "learning" );
				
				// Add current status classes
				for( x = 0; x < layer.cellMatrix.activeCells.length; x++ ) {
					$( "#cell_" + layer.cellMatrix.activeCells[x].index ).addClass( "active" );
				}
				for( x = 0; x < layer.cellMatrix.predictiveCells.length; x++ ) {
					$( "#cell_" + layer.cellMatrix.predictiveCells[x].index ).addClass( "predictive" );
				}
				for( x = 0; x < layer.cellMatrix.learningCells.length; x++ ) {
					$( "#cell_" + layer.cellMatrix.learningCells[x].index ).addClass( "learning" );
				}
			}
			
			/*
			* Make a prediction about which note will be played next
			*/
			function predict() {
				var i, x, y, key, column;
				var scores = {};
				for( i = 0; i < keys.length; i++ ) {
					key = keys[i];
					scores[key] = 0;
					for( x = 0; x < columns[key].length; x++ ) {
						column = columns[key][x];
						for( y = 0; y < column.cells.length; y++ ) {
							if( column.cells[y].predictive ) {
								scores[key]++;
							}
						}
					}
				}
				var bestNote = "";
				for( i = 0; i < keys.length; i++ ) {
					key = keys[i];
					if( ( scores[key] > 0 ) && ( ( bestNote == "" ) || ( scores[key] > scores[bestNote] ) ) ) {
						bestNote = key;
					}
				}
				// Show the predicted note
				if( bestNote == "" ) {
					$( "#prediction" ).text( noPredictionMessage );
				} else {
					$( "#prediction" ).text( bestNote.toUpperCase() );
				}
			}
			
			/*
			* Load the audio files
			*/
			function loadSounds() {
				sounds['c'] = document.createElement( 'audio' );
				sounds['c'].setAttribute( 'src', '../assets/media/C.mp3' );
				sounds['d'] = document.createElement( 'audio' );
				sounds['d'].setAttribute( 'src', '../assets/media/D.mp3' );
				sounds['e'] = document.createElement( 'audio' );
				sounds['e'].setAttribute( 'src', '../assets/media/E.mp3' );
				sounds['f'] = document.createElement( 'audio' );
				sounds['f'].setAttribute( 'src', '../assets/media/F.mp3' );
				sounds['g'] = document.createElement( 'audio' );
				sounds['g'].setAttribute( 'src', '../assets/media/G.mp3' );
			}
			
			/*
			* Draw a colored line between absolute coordinates
			*/
			function drawLine( x1, y1, x2, y2, color ) {
				var a = x1 - x2,
					b = y1 - y2,
					c = Math.sqrt( a * a + b * b );
				var sx = ( x1 + x2 ) / 2,
					sy = ( y1 + y2 ) / 2;
				var x = sx - c / 2,
					y = sy;
				var angle = Math.PI - Math.atan2( -b, a );
				
				$( "<div></div>" )
					.css( 'border-top', '1px solid ' + color )
					.css( 'width', c + 'px' )
					.css( 'height', '0px' )
					.css( '-moz-transform', 'rotate(' + angle + 'rad)' )
					.css( '-webkit-transform', 'rotate(' + angle + 'rad)' )
					.css( '-o-transform', 'rotate(' + angle + 'rad)' )
					.css( '-ms-transform', 'rotate(' + angle + 'rad)' )
					.css( 'position', 'absolute' )
					.css( 'top', y + 'px' )
					.css( 'left', x + 'px' )
					.addClass( 'line' )
					.appendTo( 'body' );
			}
			
			/*
			* Draw a colored line between two cells in the grid
			*/
			function drawCellConnections( elem1, elem2, color ) {
				drawLine(
					elem1.offset().left + 5,
					elem1.offset().top + 3,
					elem2.offset().left + 5,
					elem2.offset().top + 3,
					color
				);
			}			
			
			// Inputs for the notes (dense array of indexes to the 1's in an SDR)
			var notes = {
				'c' : [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21],
				'd' : [252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271],
				'e' : [502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521],
				'f' : [752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771],
				'g' : [1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021]
			}
		</script>
	</body>
</html>
